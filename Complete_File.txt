provider "aws" {
        region = "ap-south-1"
}

/*==== The VPC ======*/

resource "aws_vpc" "vpc-1" {
        cidr_block = "10.100.0.0/16"
        instance_tenancy = "default"
        tags = {Name = "Mumbai-vpc1"}
}

/*==== Internet gateway ======*/

resource "aws_internet_gateway" "my-ig-1" {
        vpc_id = aws_vpc.vpc-1.id
        tags = {Name = "my-internetgateway1" }
}

/*==== Public Subnet ======*/

resource "aws_subnet" "public_subnet" {
        vpc_id = aws_vpc.vpc-1.id
        cidr_block = "10.100.1.0/24"
        availability_zone = "ap-south-1a"
        tags = {Name = "mumbai-vpc-public-subnet"}
}

/*==== Private Subnet ======*/

resource "aws_subnet" "private_subnet" {
        vpc_id = aws_vpc.vpc-1.id
        cidr_block = "10.100.2.0/24"
        availability_zone = "ap-south-1b"
        tags = {Name = "mumbai-vpc-private-subnet"}
}

/*==== Route table ======*/

resource "aws_route_table" "public" {
        vpc_id = aws_vpc.vpc-1.id
        tags = {Name = "mumbai-vpc1-public-route-table"}
}

/*==== Adding routes to Route Table ======*/

resource "aws_route" "public_internet_gateway" {
        route_table_id = aws_route_table.public.id
        destination_cidr_block = "0.0.0.0/0"
        gateway_id = aws_internet_gateway.my-ig-1.id
}

/*===== Route table associations========== */

resource "aws_route_table_association" "public" {
        subnet_id = aws_subnet.public_subnet.id
        route_table_id = aws_route_table.public.id
}


/*==========Security group and allow SSH and HTTP======*/

resource "aws_security_group" "SG_1" {
        name = "linux-sg-ssh-http"
        vpc_id = aws_vpc.vpc-1.id
        description = "Allow HTTP and SSH traffic"

# Allow all inbound traffic.

ingress {
        description = "SSH"
        from_port = 22
        to_port = 22
        protocol = "tcp"
        cidr_blocks = ["0.0.0.0/0"]
}
ingress {
        description = "HTTP"
        from_port = 80
        to_port = 80
        protocol = "tcp"
        cidr_blocks = ["0.0.0.0/0"]
}
ingress {
        description = "HTTPS"
        from_port = 443
        to_port = 443
        protocol = "tcp"
        cidr_blocks = ["0.0.0.0/0"]
}

# Allow all outbound traffic.

egress {
        from_port = 0
        to_port = 0
        protocol = "-1"
        cidr_blocks = ["0.0.0.0/0"]
}
}

/*========Creating Keypair=========*/

resource "aws_key_pair" "keypair-1" {
        key_name = "sudhakey"
        public_key = file("sudhakey.pub")
}


/*========Creating Instance=========*/

resource "aws_instance"  "instance-1" {
        ami             =  "ami-0a7cf821b91bcccbc"
        instance_type   = "t2.micro"
        subnet_id = aws_subnet.public_subnet.id
        vpc_security_group_ids = [aws_security_group.SG_1.id]
        key_name  = "sudhakey"
        tags            = {Name = "webserver1"}
        user_data       = "${file("script.sh")}" #Ubuntu Script
}
resource "aws_instance"  "instance-2" {
        ami             =  "ami-0a7cf821b91bcccbc"
        instance_type   = "t2.micro"
        subnet_id = aws_subnet.public_subnet.id
        vpc_security_group_ids = [aws_security_group.SG_1.id]
        key_name  = "sudhakey"
        tags            = {Name = "webserver2"}
        user_data       = "${file("script1.sh")}"
}

/*========Classic Load Balancer=========*/

resource "aws_elb" "elb1" {
        name               = "sudha-terraform-elb1"
        subnets            = ["${aws_subnet.public_subnet.id}","${aws_subnet.private_subnet.id}"]
        security_groups    = ["${aws_security_group.SG_1.id}"]
        instances          = ["${aws_instance.instance-1.id}","${aws_instance.instance-2.id}"]

listener {
        instance_port     = 80
        instance_protocol = "http"
        lb_port           = 80
        lb_protocol       = "http"
}
}

/*========Static IP Address=========*/

resource "aws_eip" "ip1" {
  instance = "${aws_instance.instance-1.id}"
}

resource "aws_eip" "ip2" {
  instance = "${aws_instance.instance-2.id}"
}
